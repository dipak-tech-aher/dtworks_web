import React, { useState, useEffect, useContext } from 'react';
import DynamicTable from '../../../../common/table/DynamicTable';
import { SubmitInvoiceColumnList } from './SubmitInvoiceColumnList';
import Swal from 'sweetalert2';
import moment from 'moment';

import { post } from '../../../../common/util/restUtil';
import { properties } from '../../../../properties';
import { USNumberFormat } from '../../../../common/util/util';
import { AppContext } from '../../../../AppContext';
import tInvoice from "../../../../assets/images/icons/total-invoice.png";
import tAdvance from "../../../../assets/images/icons/total-advance.png";
import tPrevious from "../../../../assets/images/icons/total-previous.png";
import tOutstanding from "../../../../assets/images/icons/total-outstanding.png";

const SubmitInvoice = (props) => {
    const { auth } = useContext(AppContext)
    const [userPermission, setUserPermission] = useState({ generateInvoice: false })
    const { submitInvoiceInputs = {}, previewInvoiceCounts, generateData = [], billingReadOnly, billingGenerated = true } = props.data;
    const { handleOnSubmitInvoiceInputsChange, setBillingReadOnly } = props.handler;
    const [invoiceData, setInvoiceData] = useState([])
    const [showSummary, setShowSummary] = useState(true);
    const [isUploadLocationEdit, setIsUploadLocationEdit] = useState(false);
    const [contractList, setContractList] = useState(0)

    useEffect(() => {
        // if (props.data === undefined) { setIsOpen(false) }
        let rolePermission = []

        auth && auth.permissions && auth.permissions.filter(function (e) {
            let property = Object.keys(e)

            if (property[0] === "Invoice") {
                let value = Object.values(e)
                rolePermission = { ...rolePermission, invoice: Object.values(value[0]) }
            }
        })

        let createInvoice;

        rolePermission?.invoice?.map((screen) => {
            if (screen.screenName === "Generate Invoice") {
                createInvoice = screen.accessType
            }

        })
        setUserPermission({ generateInvoice: createInvoice })
    }, [auth])

    useEffect(() => {
        generateData.filter((e) => {
            if (e?.invoices && e?.invoices[0]?.billingStatus === 'PENDING') {
                setInvoiceData(Array(e))
            }
        })
    }, generateData)

    useEffect(() => {
        const contractCount = []
        generateData.filter((e) => {
            if (e?.invoices) {
                if (!contractCount.includes(e.invoices.contractId)) contractCount.push(e.invoices.contractId)
            }
        })
        setContractList(contractCount.length)
    }, [])


    const handleCellRender = (cell, row) => {
        if (['Invoice Period'].includes(cell.column.Header)) {
            return (
                <span>
                    {
                        cell.value && !!row?.original?.invoiceEndDate ?
                            <>
                                {moment(cell.value).format('DD MMM YYYY')} - {moment(row?.original?.invoiceEndDate).format('DD MMM YYYY')}
                            </>
                            : ''
                    }
                </span>
            )
        }
        else if (['Generate Date'].includes(cell.column.Header)) {
            return (<span>{cell.value ? `${moment(cell.value).format('DD MMM YYYY hh:mm:ss A')}` : ''}</span>)
        }
        else if (['Total Invoice Processed', 'Total Success', 'Total Failed'].includes(cell.column.Header)) {
            return (<span>{cell.value ? cell.value : 0}</span>)
        }
        else if (['Generated By'].includes(cell.column.Header)) {
            return (<span>{row?.original?.createdByName?.firstName + " " + row?.original?.createdByName?.lastName}</span>)
        }
        else {
            return (<span>{cell.value}</span>)
        }
    }

    const handleOnLocate = () => {

    }

    const handleOnSubmitInvoice = () => {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Submit it!'
        }).then((result) => {
            if (result.isConfirmed) {
                executeInvoiceSubmit();
            }
        }).catch(error => console.log(error))
    }

    const executeInvoiceSubmit = () => {

        post(`${properties.INVOICE_API}/final-submit`)
            .then((response) => {
                if (response.status === 200) {
                    Swal.fire(
                        'Submitted!',
                        'Your Invoice has been submitted.',
                        'success'
                    )
                    setBillingReadOnly(true);
                }
            })
            .catch(error => {
                console.error(error);
            })
            .finally()
    }
    return (
        <div className="row">
            <div className="col-12">
                <div className="col-12 row pb-2">
                    <div className="col-12 p-0">
                        <fieldset className="scheduler-border2">
                            <div className="col-12 row pt-1">
                                <div className="w-100 d-block mt-2 mb-2 mr-2 text-right h-search">
                                    <div className="text-primary cursor-pointer" onClick={() => setShowSummary(!showSummary)}>
                                        {showSummary ? 'Hide' : 'Show'} Summary
                                    </div>
                                </div>
                            </div>
                            {
                                showSummary &&
                                <div className="row stat-cards col-md-12 pb-2 pt-2" id="infodata4">
                                    <div className="col-12 p-0">
                                        <div className="row blog">
                                            <div className="col-md-12 p-0">
                                                <div>
                                                    <div className="row pb-2">
                                                        <div className="form-group col-lg-3 col-md-3 col-sm-6">
                                                            <article className="stat-cards-item border">
                                                                <div className="stat-cards-icon primary">
                                                                    <img src={tInvoice} alt="total-invoice" />
                                                                </div>
                                                                <div className="stat-cards-info">
                                                                    <p className="stat-cards-info__num">{USNumberFormat(previewInvoiceCounts?.totalInvoiceAmount)}</p>
                                                                    <p className="stat-cards-info__title">Total Invoice Amount</p>
                                                                </div>
                                                            </article>
                                                        </div>
                                                            <div className="form-group col-lg-3 col-md-3 col-sm-6">
                                                            <article className="stat-cards-item border">
                                                                <div className="stat-cards-icon primary">
                                                                    <img src={tAdvance} alt="total-advance" />
                                                                </div>
                                                                <div className="stat-cards-info">
                                                                    <p className="stat-cards-info__num">{USNumberFormat(previewInvoiceCounts?.totalAdvanceAmount)}</p>
                                                                    <p className="stat-cards-info__title">Total Advance Amount</p>
                                                                </div>
                                                            </article>
                                                        </div>
                                                            <div className="form-group col-lg-3 col-md-3 col-sm-6">
                                                            <article className="stat-cards-item border">
                                                                <div className="stat-cards-icon primary">
                                                                    <img src={tPrevious} alt="total-previous" />
                                                                </div>
                                                                <div className="stat-cards-info">
                                                                    <p className="stat-cards-info__num">{USNumberFormat(previewInvoiceCounts?.totalPreviousBalanceAmount)}</p>
                                                                    <p className="stat-cards-info__title">Total Previous Balance Amount</p>

                                                                </div>
                                                            </article>
                                                        </div>

                                                            <div className="form-group col-lg-3 col-md-3 col-sm-6">
                                                            <article className="stat-cards-item border">
                                                                <div className="stat-cards-icon primary">
                                                                    <img src={tOutstanding} alt="total-outstanding" />
                                                                </div>
                                                                <div className="stat-cards-info">
                                                                    <p className="stat-cards-info__num">{USNumberFormat(previewInvoiceCounts?.totalOutstandingAmount)}</p>
                                                                    <p className="stat-cards-info__title">Total Outstanding Amount</p>
                                                                </div>
                                                            </article>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </fieldset>
                    </div>
                    <div className="col-12 pr-0">
                        <div className="col-12 row p-2">
                            <div className="col-lg-3 col-md-3 col-sm-6">
                                <div className="form-group">
                                    {console.log(billingGenerated, contractList, generateData)}
                                    <label htmlFor="noOfContracts" className="col-form-label">No.Of Contracts</label>
                                    {/* <p>{(!!generateData.length && generateData[0]?.noOfContracts) || (!!generateData.length && generateData[0]?.invoiceRegenCnt)}</p> */}
                                    <p>{billingGenerated && (contractList || 0)}</p>
                                </div>
                            </div>
                            <div className="col-lg-3 col-md-3 col-sm-6">
                                <div className="form-group">
                                    <label htmlFor="totalInvoiceGenerated" className="col-form-label">Total Invoice Generated</label>
                                    <p>{(billingGenerated && !!generateData.length && generateData[0]?.invoices?.length) || 0}</p>
                                </div>
                            </div>
                            <div className="col-lg-3 col-md-3 col-sm-6">
                                <div className="form-group">
                                    <label htmlFor="generatedBy" className="col-form-label">Generated by</label>
                                    <p>{billingGenerated && !!generateData.length && generateData[0]?.createdByName?.firstName} {billingGenerated && !!generateData.length && generateData[0]?.createdByName?.lastName}</p>
                                </div>
                            </div>
                            <div className="col-lg-3 col-md-3 col-sm-6">
                                <div className="form-group">
                                    <label htmlFor="generatedDateTime" className="col-form-label">Generated Date Time</label>
                                    <p>{billingGenerated && !!generateData.length && moment(generateData[0]?.createdAt).format('DD MMM YYYY hh:mm:ss A')}</p>
                                </div>
                            </div>
                            <div className="col-lg-3 col-md-3 col-sm-6 d-none">
                                <div className="form-group">
                                    <label className="col-form-label">Invoice Upload Location</label>
                                    {
                                        !isUploadLocationEdit ?
                                            <div id="locate">
                                                <p>{!!generateData.length && generateData[0]?.pdfLocation}
                                                    <button className={`btn btn-primary btn-xs ${billingReadOnly ? 'd-none' : ''} `} onClick={() => setIsUploadLocationEdit(true)}>
                                                        <i className="mdi mdi-pencil  pr-1"></i>
                                                        Edit
                                                    </button>
                                                </p>
                                            </div>
                                            :
                                            <div className="input-group " id="editlocation">
                                                <input type="text" id="uploadLocation" className="form-control" placeholder="Default Location/invoices" aria-label="Default Location/invoices" value={submitInvoiceInputs?.uploadLocation} onChange={handleOnSubmitInvoiceInputsChange} />
                                                <div className="input-group-append">
                                                    <button className="btn btn-dark waves-effect waves-light pt-0 pb-0" type="button" onClick={handleOnLocate}>
                                                        Locate
                                                    </button>
                                                    <button className="ml-1 btn btn-primary btn-xs" onClick={() => setIsUploadLocationEdit(false)}>
                                                        Done
                                                    </button>
                                                </div>
                                            </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div className={`col-12 skel-btn-center-cmmn pt-3 ${billingReadOnly ? 'd-none' : ''}`}>
                            
                                <button type="button" className={`skel-btn-submit ${((userPermission?.generateInvoice !== 'write') ? "" : "")}`} id="submitInovice" onClick={handleOnSubmitInvoice}>Submit</button>
                            
                        </div>
                    </div>
                    {
                        !!invoiceData.length &&
                        <section className="col-12 p-0 mt-4">
                            <DynamicTable
                                row={invoiceData}
                                header={SubmitInvoiceColumnList}
                                itemsPerPage={10}
                                exportBtn={false}
                                handler={{
                                    handleCellRender: handleCellRender,
                                }}
                            />
                        </section>
                    }
                </div>
            </div>
        </div>
    )
}

export default SubmitInvoice;